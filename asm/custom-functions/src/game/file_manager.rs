// automatically generated by rust-bindgen 0.63.0
// silence lints since this is "autogenerated"
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use core::ffi::{c_char, c_int, c_short, c_uchar, c_uint, c_ushort};

use super::save_file::{SaveFile, SavedSaveFiles};

#[repr(C)]
#[derive(Copy, Clone)]
pub struct FileManager {
    pub saveFiles:        *mut SavedSaveFiles,
    pub saveTails:        u32,
    pub FA:               SaveFile,
    pub FB:               SaveFile,
    pub skipFlags:        [c_ushort; 16usize],
    pub skipflagChecksum: c_int,
    pub field6_0xa7ac:    *mut c_ushort,
    pub field_0xa7b0:     [u8; 50usize],
    pub heroname:         [c_ushort; 18usize],
    pub field_0xa806:     [u8; 54usize],
    pub field112_0xa83c:  u8,
    pub isFileEmpty:      [u8; 3usize],
    pub isFileUnk1:       [u8; 3usize],
    pub isFileUnk2:       [u8; 3usize],
    pub isFileUnk3:       [u8; 3usize],
    pub field_0xa849:     [u8; 3usize],
    pub field120_0xa84c:  u8,
    pub field_0xa84d:     [u8; 1usize],
    pub anticommit_flag:  u8,
    pub field_0xa84f:     [u8; 1usize],
}

extern "C" {
    static FILE_MANAGER: *mut FileManager;
    fn FileManager__getDungeonFlags(_: *mut FileManager) -> *mut [[c_ushort; 8usize]; 22usize];
    fn FileManager__SaveFileAToSelected(_: *mut FileManager);
    fn FileManager__LoadSelectedToFileA(_: *mut FileManager);
    fn FileManager__GetCurrentHealth(_: *mut FileManager) -> u16;
    fn FileManager__GetCurrentFile(_: *const FileManager) -> *mut SaveFile;
}

pub fn get_ptr() -> *mut FileManager {
    unsafe { FILE_MANAGER }
}
pub fn get_dungeon_flags() -> *mut [[c_ushort; 8]; 22] {
    unsafe { FileManager__getDungeonFlags(FILE_MANAGER) }
}
pub fn save_A_to_selected() {
    unsafe { FileManager__SaveFileAToSelected(FILE_MANAGER) };
}
pub fn load_selected_to_A() {
    unsafe { FileManager__LoadSelectedToFileA(FILE_MANAGER) };
}
pub fn get_current_health() -> u16 {
    unsafe { FileManager__GetCurrentHealth(FILE_MANAGER) }
}
pub fn get_current_file() -> *mut SaveFile {
    unsafe { FileManager__GetCurrentFile(FILE_MANAGER) }
}
